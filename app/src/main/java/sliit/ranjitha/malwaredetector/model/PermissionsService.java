package sliit.ranjitha.malwaredetector.model;

import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.pm.PermissionInfo;
import android.os.Build;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;



public class PermissionsService {


    public final PermissionDataAggregate get(PackageInfo packageInfo, PackageManager packageManager) {
        List<PermissionData> definedPermissions = this.getDefinedPermissions(packageInfo);
        List<UsedPermissionData> requestedPermissions = this.getUsedPermissions(packageInfo, packageManager);
        return new PermissionDataAggregate(definedPermissions, requestedPermissions);
    }

    private final List<PermissionData> getDefinedPermissions(PackageInfo packageInfo) {
        PermissionInfo[] var10000 = packageInfo.permissions;
        if (var10000 == null) {
            return (List)(new ArrayList(0));
        } else {
            PermissionInfo[] permissionInfos = var10000;
            Collection destination$iv = (Collection)(new ArrayList(permissionInfos.length));
            PermissionInfo[] var6 = permissionInfos;
            int var7 = permissionInfos.length;

            for(int var8 = 0; var8 < var7; ++var8) {

                PermissionInfo permissionInfo = permissionInfos[var8];
                Object item$iv = var6[var8];
                String var10002 = permissionInfo.name;
                PermissionData var13 = new PermissionData(var10002, (String)null, permissionInfo.group, permissionInfo.protectionLevel);
                destination$iv.add(var13);
            }

            return (List)destination$iv;
        }
    }

    public final List<UsedPermissionData> getUsedPermissions(PackageInfo packageInfo, PackageManager packageManager) {

        String[] requestedPermissionsList = packageInfo.requestedPermissions;
        if (requestedPermissionsList == null) {
            return (List)(new ArrayList(0));
        } else {

            int[] requestedPermissionFlags = Build.VERSION.SDK_INT >= 16 ? packageInfo.requestedPermissionsFlags : new int[0];
            List<UsedPermissionData> requestedPermissions = (List)(new ArrayList(requestedPermissionsList.length));

            for (int i = 0; i < requestedPermissionsList.length; i++) {
                String name = requestedPermissionsList[i];

                boolean  isGranted = Build.VERSION.SDK_INT >= 16 && (requestedPermissionFlags[i] & 2) != 0;
                PermissionData var14;
                try {
                    PermissionInfo permissionInfo = packageManager.getPermissionInfo(name, PackageManager.GET_META_DATA);
                    var14 = new PermissionData(name, (String)null, permissionInfo.group, permissionInfo.protectionLevel);
                } catch (Exception var17) {
                    var14 = new PermissionData(name, (String)null, (String)null, 0);
                }

                requestedPermissions.add(new UsedPermissionData(var14,isGranted));
            }

            return requestedPermissions;
        }
    }

}
