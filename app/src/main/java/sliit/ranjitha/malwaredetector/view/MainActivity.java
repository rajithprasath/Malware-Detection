package sliit.ranjitha.malwaredetector.view;


import android.app.Activity;
import android.content.ClipboardManager;
import android.content.ContentResolver;
import android.content.Context;
import android.content.Intent;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.graphics.Color;
import android.net.Uri;
import android.net.wifi.ScanResult;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.WindowManager;
import android.widget.Button;
import android.widget.ProgressBar;
import android.widget.TextView;
import android.widget.Toast;

import com.androidnetworking.AndroidNetworking;
import com.androidnetworking.common.Priority;
import com.androidnetworking.error.ANError;
import com.androidnetworking.interfaces.JSONArrayRequestListener;
import com.androidnetworking.interfaces.JSONObjectRequestListener;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import butterknife.BindView;
import butterknife.ButterKnife;
import butterknife.OnClick;
import sliit.ranjitha.malwaredetector.R;
import sliit.ranjitha.malwaredetector.interfaces.ResultsListner;
import sliit.ranjitha.malwaredetector.model.ActivityData;
import sliit.ranjitha.malwaredetector.model.ActivityDataAggregate;
import sliit.ranjitha.malwaredetector.model.ActivityService;
import sliit.ranjitha.malwaredetector.model.PermissionDataAggregate;
import sliit.ranjitha.malwaredetector.model.PermissionsService;
import sliit.ranjitha.malwaredetector.util.HashRunnable;

public class MainActivity extends AppCompatActivity implements ResultsListner {

    private static final int READ_REQUEST_CODE = 42;
    private Uri fileURI;
    private String hashtype = "MD5";
    private ClipboardManager clipboard;
    @BindView(R.id.hashOutput)
    TextView hashOutput;

    @BindView(R.id.progress)
    ProgressBar progress;

    @BindView(R.id.hashButton)
    Button hashButton;

    @BindView(R.id.hashCmpButton)
    Button hashCmpButton;

    @BindView(R.id.fileButton)
    Button fileButton;

    @BindView(R.id.activity_main)
    View contentView;
    private PermissionDataAggregate permissionDataAggregate;
    private ActivityDataAggregate activityDataAggregate;
    private PermissionsService permissionsService;
    private ActivityService activityService;
    int analysisFlags =PackageManager.GET_SIGNATURES
            | PackageManager.GET_ACTIVITIES
            | PackageManager.GET_SERVICES
            | PackageManager.GET_PROVIDERS
            | PackageManager.GET_RECEIVERS
            | PackageManager.GET_PERMISSIONS
            | PackageManager.GET_CONFIGURATIONS;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        ButterKnife.bind(this);
        AndroidNetworking.initialize(getApplicationContext());
        setupFileHashPane(getApplicationContext());
    }

    private void setupFileHashPane(Context context) {
        //set visibility and initialize labels/buttons
        hashCmpButton.setText(getString(R.string.compare_hashes));
        hashButton.setEnabled(false);
        progress.setVisibility(View.INVISIBLE);

        //Done setting up

        fileButton.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                showFileChooser();
            }
        });

        // handlers for comparing hash text when hashCmpText is clicked
        hashCmpButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                compareHashes();
            }
        });


    }

    @OnClick(R.id.hashButton)
    public void hashButtonClick() {
        if (fileButton.getVisibility() == View.VISIBLE) {
            ContentResolver cr = getContentResolver();
            HashRunnable hasher = new HashRunnable(hashtype, cr, this);
            hasher.execute(fileURI);
        }

        hashCmpButton.setText(R.string.compare_hashes);
        hashCmpButton.setTextColor(Color.WHITE);
    }

    private void compareHashes() {
        Toast toast;
        Context context = getApplicationContext();
        if (!hashOutput.getText().toString().isEmpty()) {
            progress.setVisibility(View.VISIBLE);
            List<String> malwareList = Arrays.asList(getResources().getStringArray(R.array.malware_array));
            boolean isMalwareDetect = false;
            for (String malware : malwareList) {
                if (malware.toUpperCase().equals(hashOutput.getText().toString().toUpperCase())) {
                    isMalwareDetect = true;
                    break;
                }
            }

            if (isMalwareDetect) {
                progress.setVisibility(View.INVISIBLE);
                createMalwareAlertDialog();
                hashCmpButton.setTextColor(Color.RED);

            } else {
                sendDetailsToServer();
            }


        }else{
            toast = Toast.makeText(context, R.string.emptyClipboard, Toast.LENGTH_SHORT);
            toast.show();

        }

    }

    /* File chooser for selecting files */
    private void showFileChooser() {
        Intent intent = new Intent(Intent.ACTION_OPEN_DOCUMENT);
        intent.addCategory(Intent.CATEGORY_OPENABLE);
        intent.setType("application/vnd.android.package-archive");
        startActivityForResult(intent, READ_REQUEST_CODE);
    }

    /* For selecting files for file-hashing */
    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent resultData) {

        super.onActivityResult(requestCode, resultCode, resultData);

        if (requestCode == READ_REQUEST_CODE && resultCode == Activity.RESULT_OK && resultData != null) {
            hashOutput.setText("");
            fileURI = resultData.getData();
            final PackageManager pm = getPackageManager();
            PackageInfo info = getPackageInfo(uriToPatch(fileURI),analysisFlags);
            permissionsService = new  PermissionsService();
            activityService = new ActivityService();
             permissionDataAggregate = permissionsService.get(info,pm);
            activityDataAggregate = activityService.get(info,pm);
            //grant permission in advance to prevent SecurityException
            try {
                grantUriPermission(getPackageName(), fileURI, Intent.FLAG_GRANT_READ_URI_PERMISSION);
            } catch (NullPointerException e) {
                Toast toast = Toast.makeText(getApplicationContext(),
                        "Failed to get file reading permissions.", Toast.LENGTH_SHORT);
                toast.show();
                return;
            }
            // Check for the freshest data.
            try {
                getContentResolver().takePersistableUriPermission(fileURI,
                        Intent.FLAG_GRANT_READ_URI_PERMISSION);
            } catch (SecurityException e) {
                Toast toast = Toast.makeText(getApplicationContext(),
                        "Opening file failed- report to developer!", Toast.LENGTH_SHORT);
                toast.show();
                return;
            }

            ContentResolver cr = getContentResolver();
            try {
                InputStream is = cr.openInputStream(fileURI);

                if (is != null)
                    hashButton.setEnabled(true);

            } catch (FileNotFoundException e) {
                Log.e("FileDebug", e.getMessage());
            }


        }
    }

    private String uriToPatch(Uri uri) {
        return fromUri(uri).getAbsolutePath();
    }

    private File fromUri(Uri uri) {
        File tempFile = null;
        try {
            tempFile = File.createTempFile("analysed", ".apk");
            tempFile.deleteOnExit();
            ContentResolver res = getContentResolver();
            InputStream in = res.openInputStream(uri);
            if (in != null) {
                copyInputStreamToFile(in, tempFile);
            }
            return tempFile;
        } catch (IOException e) {
            e.printStackTrace();
        }
        return null;
    }

    private static void copyInputStreamToFile(InputStream inputStream, File file)
            throws IOException {

        try (FileOutputStream outputStream = new FileOutputStream(file)) {

            int read;
            byte[] bytes = new byte[1024];

            while ((read = inputStream.read(bytes)) != -1) {
                outputStream.write(bytes, 0, read);
            }


        }

    }

    public void displayWaitProgress() {
        progress.setVisibility(View.VISIBLE);
        hashOutput.setText(R.string.waitText);
    }

    public void displayResults(String results) {
        progress.setVisibility(View.INVISIBLE);
        hashOutput.setText(results.toUpperCase());
    }

    private void createMalwareAlertDialog() {
        LayoutInflater myLayout = LayoutInflater.from(MainActivity.this);
        final View dialogView = myLayout.inflate(R.layout.malware_alert_dialog, null);
        android.app.AlertDialog.Builder alertDialogBuilder = new android.app.AlertDialog.Builder(
                MainActivity.this);
        alertDialogBuilder.setView(dialogView);
        final android.app.AlertDialog alertDialog = alertDialogBuilder.create();
        alertDialog.setCanceledOnTouchOutside(false);
        alertDialog.show();


        TextView okTextView = (TextView) alertDialog.findViewById(R.id.yes_button_text_view);
        TextView cancelTextView = (TextView) alertDialog.findViewById(R.id.cancel_button_text_view);


        okTextView.setOnClickListener(new View.OnClickListener() {

            public void onClick(View v) {
                alertDialog.dismiss();


            }
        });
        cancelTextView.setOnClickListener(new View.OnClickListener() {

            public void onClick(View v) {
                alertDialog.dismiss();


            }
        });
    }

    private void createAllgoodAlertDialog() {
        LayoutInflater myLayout = LayoutInflater.from(MainActivity.this);
        final View dialogView = myLayout.inflate(R.layout.all_good_alert_dialog, null);
        android.app.AlertDialog.Builder alertDialogBuilder = new android.app.AlertDialog.Builder(
                MainActivity.this);
        alertDialogBuilder.setView(dialogView);
        final android.app.AlertDialog alertDialog = alertDialogBuilder.create();
        alertDialog.setCanceledOnTouchOutside(false);
        alertDialog.show();


        TextView okTextView = (TextView) alertDialog.findViewById(R.id.ok_button_text_view);


        okTextView.setOnClickListener(new View.OnClickListener() {

            public void onClick(View v) {
                alertDialog.dismiss();


            }
        });

    }

    private PackageInfo getPackageInfo(String path,int analysisFlags){
        final PackageManager pm = getPackageManager();
        PackageInfo packageInfo = pm.getPackageArchiveInfo(path, analysisFlags);
        if(packageInfo!=null && packageInfo.applicationInfo!=null){
            packageInfo.applicationInfo.sourceDir = path;
        }

        return packageInfo;

    }

    private void sendDetailsToServer(){
        String apikey = "Bearer Pug03rHMs+bEPxtDPFggsgyajOMMKgdlgybATAvOZYL+u9P9mQ98eUn+a0dy7PS9a2SKpr4tsa4zdvD9U6zqUA==";
        JSONObject jsonObject = new JSONObject();
        JSONObject inputObject = new JSONObject();
        JSONObject globleObject = new JSONObject();
        JSONObject input1Object= new JSONObject();
        JSONArray parameterArray = new JSONArray();
        JSONArray valuesArray = new JSONArray();
        JSONArray values1Array = new JSONArray();
        JSONArray values2Array = new JSONArray();
        String readPermissionValue = "0",readSMSValue = "0",sendSMSValue = "0",processCallsValue = "0",callPhonevalue= "0",activityCount= "0",permissionCount = "0";
        List<String> usedPermissionList = permissionDataAggregate.getUsedPermissionsNames();
        List<String> usedActivityList = activityDataAggregate.getUsedActivityNames();
        for(String permission: usedPermissionList){
            if(permission.equals("android.permission.READ_PHONE_STATE")){
                readPermissionValue = "1";
            }
            if(permission.equals("android.permission.READ_SMS")){
                readSMSValue = "1";
            }
            if(permission.equals("android.permission.SEND_SMS")){
                sendSMSValue = "1";
            }
            if(permission.equals("android.permission.PROCESS_OUTGOING_CALLS")){
                processCallsValue = "1";
            }if(permission.equals("android.permission.CALL_PHONE")){
                callPhonevalue = "1";
            }



        }
        int pCount = usedPermissionList.size();
        int aCount = usedActivityList.size();
        permissionCount = String.valueOf(pCount);
        activityCount = String.valueOf(aCount);
        try {
            parameterArray.put(0,"android.permission.READ_PHONE_STATE");
            parameterArray.put(1,"android.permission.READ_SMS");
            parameterArray.put(2,"android.permission.SEND_SMS");
            parameterArray.put(3,"android.permission.PROCESS_OUTGOING_CALLS");
            parameterArray.put(4,"android.permission.CALL_PHONE");
            parameterArray.put(5,"Permission");
            parameterArray.put(6,"Activities");
            values1Array.put(0,readPermissionValue);
            values1Array.put(1,readSMSValue);
            values1Array.put(2,sendSMSValue);
            values1Array.put(3,processCallsValue);
            values1Array.put(4,callPhonevalue);
            values1Array.put(5,permissionCount);
            values1Array.put(6,activityCount);
            values2Array.put(0,readPermissionValue);
            values2Array.put(1,readSMSValue);
            values2Array.put(2,sendSMSValue);
            values2Array.put(3,processCallsValue);
            values2Array.put(4,callPhonevalue);
            values2Array.put(5,permissionCount);
            values2Array.put(6,activityCount);
            valuesArray.put(0,values1Array);
            valuesArray.put(1,values2Array);
            input1Object.put("ColumnNames", parameterArray);
            input1Object.put("Values", valuesArray);
            inputObject.put("input1",input1Object);
            jsonObject.put("Inputs", inputObject);
            jsonObject.put("GlobalParameters", globleObject);
        } catch (JSONException e) {
            e.printStackTrace();
        }

        System.out.println("shshshshshshsh 6666666   " + jsonObject.toString());
        AndroidNetworking.post("https://ussouthcentral.services.azureml.net/workspaces/242d95b608d94e29a240ce8844882f39/services/885d6163625a4369a751a7acafbf18e2/execute?api-version=2.0&details=true")
                .addJSONObjectBody(jsonObject) // posting json
                .setTag("test")
                .addHeaders("Authorization",apikey)
                .addHeaders("Content-Type","application/json")
                .addHeaders("Accept","application/json")
                .setPriority(Priority.MEDIUM)
                .build()
                .getAsJSONObject(new JSONObjectRequestListener() {
                    @Override
                    public void onResponse(JSONObject response) {
                        progress.setVisibility(View.INVISIBLE);
                        checkResponse(response);
                        System.out.println("shshshshshshsh 777777   " + response.toString());

                    }

                    @Override
                    public void onError(ANError anError) {
                        progress.setVisibility(View.INVISIBLE);

                    }
                });
    }

    private void checkResponse(JSONObject response){

        JSONObject resultObject = response.optJSONObject("Results");
        JSONObject outputObject = resultObject.optJSONObject("output1");
        JSONObject valueObject = outputObject.optJSONObject("value");
        JSONArray valuesArray = valueObject.optJSONArray("Values");
        try {
            JSONArray firstArray = (JSONArray) valuesArray.get(0);
            String result = firstArray.getString(0);
            if(result.equals("Benign")){
                hashCmpButton.setTextColor(Color.GREEN);
                createAllgoodAlertDialog();
            }else{
                hashCmpButton.setTextColor(Color.RED);
                createMalwareAlertDialog();
            }
        } catch (JSONException e) {
            e.printStackTrace();
        }

    }
}
