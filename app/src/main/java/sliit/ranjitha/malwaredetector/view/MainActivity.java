package sliit.ranjitha.malwaredetector.view;


import android.app.Activity;
import android.content.ClipboardManager;
import android.content.ContentResolver;
import android.content.Context;
import android.content.Intent;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.graphics.Color;
import android.net.Uri;
import android.net.wifi.ScanResult;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.widget.Button;
import android.widget.ProgressBar;
import android.widget.TextView;
import android.widget.Toast;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import butterknife.BindView;
import butterknife.ButterKnife;
import butterknife.OnClick;
import sliit.ranjitha.malwaredetector.R;
import sliit.ranjitha.malwaredetector.interfaces.ResultsListner;
import sliit.ranjitha.malwaredetector.util.HashRunnable;

public class MainActivity extends AppCompatActivity implements ResultsListner {

    private static final int READ_REQUEST_CODE = 42;
    private Uri fileURI;
    private String hashtype = "MD5";
    private ClipboardManager clipboard;
    @BindView(R.id.hashOutput)
    TextView hashOutput;

    @BindView(R.id.progress)
    ProgressBar progress;

    @BindView(R.id.hashButton)
    Button hashButton;

    @BindView(R.id.hashCmpButton)
    Button hashCmpButton;

    @BindView(R.id.fileButton)
    Button fileButton;

    @BindView(R.id.activity_main)
    View contentView;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        ButterKnife.bind(this);

        setupFileHashPane(getApplicationContext());
    }

    private void setupFileHashPane(Context context) {
        //set visibility and initialize labels/buttons
        hashCmpButton.setText(getString(R.string.compare_hashes));
        hashButton.setEnabled(false);
        progress.setVisibility(View.INVISIBLE);

        //Done setting up

        fileButton.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                showFileChooser();
            }
        });

        // handlers for comparing hash text when hashCmpText is clicked
        hashCmpButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                compareHashes();
            }
        });


    }

    @OnClick(R.id.hashButton)
    public void hashButtonClick() {
        if (fileButton.getVisibility() == View.VISIBLE) {
            ContentResolver cr = getContentResolver();
            HashRunnable hasher = new HashRunnable(hashtype, cr, this);
            hasher.execute(fileURI);
        }

        hashCmpButton.setText(R.string.compare_hashes);
        hashCmpButton.setTextColor(Color.WHITE);
    }

    private void compareHashes() {
        Toast toast;
        Context context = getApplicationContext();
        if (!hashOutput.getText().toString().isEmpty()) {
            progress.setVisibility(View.VISIBLE);
            List<String> malwareList = Arrays.asList(getResources().getStringArray(R.array.malware_array));
            boolean isMalwareDetect = false;
            for (String malware : malwareList) {
                if (malware.toUpperCase().equals(hashOutput.getText().toString().toUpperCase())) {
                    isMalwareDetect = true;
                    break;
                }
            }
            progress.setVisibility(View.INVISIBLE);
            if (isMalwareDetect) {
                createMalwareAlertDialog();
                hashCmpButton.setTextColor(Color.RED);

            } else {
                createAllgoodAlertDialog();
                hashCmpButton.setTextColor(Color.GREEN);

            }


        }else{
            toast = Toast.makeText(context, R.string.emptyClipboard, Toast.LENGTH_SHORT);
            toast.show();

        }

    }

    /* File chooser for selecting files */
    private void showFileChooser() {
        Intent intent = new Intent(Intent.ACTION_OPEN_DOCUMENT);
        intent.addCategory(Intent.CATEGORY_OPENABLE);
        intent.setType("application/vnd.android.package-archive");
        startActivityForResult(intent, READ_REQUEST_CODE);
    }

    /* For selecting files for file-hashing */
    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent resultData) {

        super.onActivityResult(requestCode, resultCode, resultData);

        if (requestCode == READ_REQUEST_CODE && resultCode == Activity.RESULT_OK && resultData != null) {
            hashOutput.setText("");
            fileURI = resultData.getData();
            final PackageManager pm = getPackageManager();
            PackageInfo info0 = pm.getPackageArchiveInfo(uriToPatch(fileURI), 0);
            System.out.println("awqawqawq 3333333 " + info0.packageName);

            //grant permission in advance to prevent SecurityException
            try {
                grantUriPermission(getPackageName(), fileURI, Intent.FLAG_GRANT_READ_URI_PERMISSION);
            } catch (NullPointerException e) {
                Toast toast = Toast.makeText(getApplicationContext(),
                        "Failed to get file reading permissions.", Toast.LENGTH_SHORT);
                toast.show();
                return;
            }
            // Check for the freshest data.
            try {
                getContentResolver().takePersistableUriPermission(fileURI,
                        Intent.FLAG_GRANT_READ_URI_PERMISSION);
            } catch (SecurityException e) {
                Toast toast = Toast.makeText(getApplicationContext(),
                        "Opening file failed- report to developer!", Toast.LENGTH_SHORT);
                toast.show();
                return;
            }

            ContentResolver cr = getContentResolver();
            try {
                InputStream is = cr.openInputStream(fileURI);

                if (is != null)
                    hashButton.setEnabled(true);

            } catch (FileNotFoundException e) {
                Log.e("FileDebug", e.getMessage());
            }


        }
    }

    private String uriToPatch(Uri uri) {
        return fromUri(uri).getAbsolutePath();
    }

    private File fromUri(Uri uri) {
        File tempFile = null;
        try {
            tempFile = File.createTempFile("analysed", ".apk");
            tempFile.deleteOnExit();
            ContentResolver res = getContentResolver();
            InputStream in = res.openInputStream(uri);
            if (in != null) {
                copyInputStreamToFile(in, tempFile);
            }
            return tempFile;
        } catch (IOException e) {
            e.printStackTrace();
        }
        return null;
    }

    private static void copyInputStreamToFile(InputStream inputStream, File file)
            throws IOException {

        try (FileOutputStream outputStream = new FileOutputStream(file)) {

            int read;
            byte[] bytes = new byte[1024];

            while ((read = inputStream.read(bytes)) != -1) {
                outputStream.write(bytes, 0, read);
            }


        }

    }

    public void displayWaitProgress() {
        progress.setVisibility(View.VISIBLE);
        hashOutput.setText(R.string.waitText);
    }

    public void displayResults(String results) {
        progress.setVisibility(View.INVISIBLE);
//        hashOutput.setText(results.toUpperCase());
        hashOutput.setText("db01f96d5e66d82f7eb61b85eb96ef6e");
    }

    private void createMalwareAlertDialog() {
        LayoutInflater myLayout = LayoutInflater.from(MainActivity.this);
        final View dialogView = myLayout.inflate(R.layout.malware_alert_dialog, null);
        android.app.AlertDialog.Builder alertDialogBuilder = new android.app.AlertDialog.Builder(
                MainActivity.this);
        alertDialogBuilder.setView(dialogView);
        final android.app.AlertDialog alertDialog = alertDialogBuilder.create();
        alertDialog.setCanceledOnTouchOutside(false);
        alertDialog.show();


        TextView okTextView = (TextView) alertDialog.findViewById(R.id.yes_button_text_view);
        TextView cancelTextView = (TextView) alertDialog.findViewById(R.id.cancel_button_text_view);


        okTextView.setOnClickListener(new View.OnClickListener() {

            public void onClick(View v) {
                alertDialog.dismiss();


            }
        });
        cancelTextView.setOnClickListener(new View.OnClickListener() {

            public void onClick(View v) {
                alertDialog.dismiss();


            }
        });
    }

    private void createAllgoodAlertDialog() {
        LayoutInflater myLayout = LayoutInflater.from(MainActivity.this);
        final View dialogView = myLayout.inflate(R.layout.all_good_alert_dialog, null);
        android.app.AlertDialog.Builder alertDialogBuilder = new android.app.AlertDialog.Builder(
                MainActivity.this);
        alertDialogBuilder.setView(dialogView);
        final android.app.AlertDialog alertDialog = alertDialogBuilder.create();
        alertDialog.setCanceledOnTouchOutside(false);
        alertDialog.show();


        TextView okTextView = (TextView) alertDialog.findViewById(R.id.ok_button_text_view);


        okTextView.setOnClickListener(new View.OnClickListener() {

            public void onClick(View v) {
                alertDialog.dismiss();


            }
        });

    }
}
